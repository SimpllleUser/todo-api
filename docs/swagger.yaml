basePath: /api/v1
definitions:
  model.AuthInput:
    properties:
      login:
        type: string
      password:
        type: string
    required:
    - login
    - password
    type: object
  model.AuthResponse:
    properties:
      token:
        type: string
    type: object
  model.BooleanResponse:
    properties:
      data:
        type: boolean
    type: object
  model.HTTPError:
    properties:
      error:
        type: string
    type: object
  model.TodoCreateRequest:
    properties:
      completed:
        example: false
        type: boolean
      description:
        example: Milk, eggs, bread
        type: string
      title:
        example: Buy groceries
        type: string
    type: object
  model.TodoModel:
    properties:
      completed:
        example: false
        type: boolean
      description:
        example: Milk, eggs, bread
        type: string
      id:
        example: 1
        type: integer
      title:
        example: Buy groceries
        type: string
    type: object
  model.UserCreateRequest:
    properties:
      token:
        type: string
      user:
        $ref: '#/definitions/model.UserModel'
    required:
    - token
    type: object
  model.UserModel:
    properties:
      createdAt:
        type: string
      id:
        type: integer
      login:
        type: string
      name:
        type: string
      password:
        type: string
      updatedAt:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is a simple API for managing TODOs.
  title: TODO API
  version: 0.0.1
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login user
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.AuthInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.AuthResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/model.HTTPError'
        "401":
          description: Error authenticating user
          schema:
            $ref: '#/definitions/model.HTTPError'
        "500":
          description: Could not generate token
          schema:
            $ref: '#/definitions/model.HTTPError'
      summary: Login user
      tags:
      - Auth
  /auth/registration:
    post:
      consumes:
      - application/json
      description: Create user
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.AuthInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UserCreateRequest'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/model.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.HTTPError'
      summary: Create user
      tags:
      - Auth
  /todos:
    get:
      description: get todos
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.TodoModel'
            type: array
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.HTTPError'
      security:
      - BearerAuth: []
      summary: Get all todos
      tags:
      - Todos
    post:
      consumes:
      - application/json
      description: Create todo
      parameters:
      - description: Todo data
        in: body
        name: todo
        required: true
        schema:
          $ref: '#/definitions/model.TodoCreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.TodoModel'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/model.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.HTTPError'
      security:
      - BearerAuth: []
      summary: Create todo
      tags:
      - Todos
    put:
      consumes:
      - application/json
      description: update todo
      parameters:
      - description: Todo data
        in: body
        name: todo
        required: true
        schema:
          $ref: '#/definitions/model.TodoModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.TodoModel'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/model.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.HTTPError'
      security:
      - BearerAuth: []
      summary: Update todo
      tags:
      - Todos
  /todos/:id:
    delete:
      description: delete todo by id
      parameters:
      - description: Todo ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.BooleanResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/model.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.HTTPError'
      security:
      - BearerAuth: []
      summary: Delete todo by id
      tags:
      - Todos
    get:
      description: get todo by id
      parameters:
      - description: Todo ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "302":
          description: Found
          schema:
            $ref: '#/definitions/model.TodoModel'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/model.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.HTTPError'
      security:
      - BearerAuth: []
      summary: Get todo by id
      tags:
      - Todos
  /todos/title/:title:
    get:
      description: get todo by title
      parameters:
      - description: Todo title
        in: path
        name: title
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.TodoModel'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/model.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.HTTPError'
      security:
      - BearerAuth: []
      summary: Get todo by title
      tags:
      - Todos
securityDefinitions:
  BearerAuth:
    description: Enter your token **with** Bearer prefix, e.g. `Bearer <token>`
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
