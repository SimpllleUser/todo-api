// model/database.go
package model

import (
	"log"
	
	"gorm.io/driver/sqlite"
	"gorm.io/gorm"
)

var DB *gorm.DB

// InitDB ініціалізує підключення до бази даних
func InitDB(databasePath string) {
	var err error
	
	// Підключення до SQLite бази даних
	DB, err = gorm.Open(sqlite.Open(databasePath), &gorm.Config{})
	if err != nil {
		log.Fatal("Не вдалося підключитися до бази даних:", err)
	}
	
	log.Println("Успішно підключено до бази даних")
	
	// Автоматична міграція схем
	err = DB.AutoMigrate(&User{})
	if err != nil {
		log.Fatal("Помилка міграції:", err)
	}
	
	log.Println("Міграція завершена успішно")
}

// GetDB повертає екземпляр бази даних
func GetDB() *gorm.DB {
	return DB
}

// CloseDB закриває підключення до бази даних
func CloseDB() {
	sqlDB, err := DB.DB()
	if err != nil {
		log.Println("Помилка отримання SQL DB:", err)
		return
	}
	
	err = sqlDB.Close()
	if err != nil {
		log.Println("Помилка закриття бази даних:", err)
	} else {
		log.Println("Підключення до бази даних закрито")
	}
}









// model/user.go
package model

import (
	"time"
	
	"gorm.io/gorm"
)

// User модель користувача
type User struct {
	ID        uint           `gorm:"primaryKey" json:"id"`
	Name      string         `gorm:"size:100;not null" json:"name"`
	Email     string         `gorm:"size:100;uniqueIndex;not null" json:"email"`
	Password  string         `gorm:"size:255;not null" json:"-"`
	CreatedAt time.Time      `json:"created_at"`
	UpdatedAt time.Time      `json:"updated_at"`
	DeletedAt gorm.DeletedAt `gorm:"index" json:"-"`
}

// UserService структура для роботи з користувачами
type UserService struct {
	db *gorm.DB
}

// NewUserService створює новий сервіс користувачів
func NewUserService(db *gorm.DB) *UserService {
	return &UserService{db: db}
}

// Create створює нового користувача
func (s *UserService) Create(user *User) error {
	return s.db.Create(user).Error
}

// GetByID отримує користувача за ID
func (s *UserService) GetByID(id uint) (*User, error) {
	var user User
	err := s.db.First(&user, id).Error
	return &user, err
}

// GetByEmail отримує користувача за email
func (s *UserService) GetByEmail(email string) (*User, error) {
	var user User
	err := s.db.Where("email = ?", email).First(&user).Error
	return &user, err
}

// GetAll отримує всіх користувачів
func (s *UserService) GetAll() ([]User, error) {
	var users []User
	err := s.db.Find(&users).Error
	return users, err
}

// Update оновлює користувача
func (s *UserService) Update(user *User) error {
	return s.db.Save(user).Error
}

// Delete видаляє користувача
func (s *UserService) Delete(id uint) error {
	return s.db.Delete(&User{}, id).Error
}








// controller/user_controller.go
package controller

import (
	"net/http"
	"strconv"
	
	"github.com/gin-gonic/gin"
	"your-project/model"
)

// UserController структура контролера користувачів
type UserController struct {
	userService *model.UserService
}

// NewUserController створює новий контролер користувачів
func NewUserController(userService *model.UserService) *UserController {
	return &UserController{
		userService: userService,
	}
}

// GetUsers отримує всіх користувачів
func (uc *UserController) GetUsers(c *gin.Context) {
	users, err := uc.userService.GetAll()
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}
	c.JSON(http.StatusOK, gin.H{
		"data":    users,
		"message": "Користувачі отримані успішно",
	})
}

// CreateUser створює нового користувача
func (uc *UserController) CreateUser(c *gin.Context) {
	var user model.User
	if err := c.ShouldBindJSON(&user); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}
	
	if err := uc.userService.Create(&user); err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}
	
	c.JSON(http.StatusCreated, gin.H{
		"data":    user,
		"message": "Користувача створено успішно",
	})
}

// GetUserByID отримує користувача за ID
func (uc *UserController) GetUserByID(c *gin.Context) {
	id, err := strconv.ParseUint(c.Param("id"), 10, 32)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Неправильний ID"})
		return
	}
	
	user, err := uc.userService.GetByID(uint(id))
	if err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "Користувача не знайдено"})
		return
	}
	
	c.JSON(http.StatusOK, gin.H{
		"data":    user,
		"message": "Користувача знайдено",
	})
}

// UpdateUser оновлює користувача
func (uc *UserController) UpdateUser(c *gin.Context) {
	id, err := strconv.ParseUint(c.Param("id"), 10, 32)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Неправильний ID"})
		return
	}
	
	user, err := uc.userService.GetByID(uint(id))
	if err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "Користувача не знайдено"})
		return
	}
	
	if err := c.ShouldBindJSON(user); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}
	
	if err := uc.userService.Update(user); err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}
	
	c.JSON(http.StatusOK, gin.H{
		"data":    user,
		"message": "Користувача оновлено успішно",
	})
}

// DeleteUser видаляє користувача
func (uc *UserController) DeleteUser(c *gin.Context) {
	id, err := strconv.ParseUint(c.Param("id"), 10, 32)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Неправильний ID"})
		return
	}
	
	if err := uc.userService.Delete(uint(id)); err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}
	
	c.JSON(http.StatusOK, gin.H{
		"message": "Користувача видалено успішно",
	})
}



// routes/routes.go
package routes

import (
	"github.com/gin-gonic/gin"
	"your-project/controller"
)

// SetupRoutes налаштовує всі маршрути
func SetupRoutes(r *gin.Engine, userController *controller.UserController) {
	// API роути
	api := r.Group("/api/v1")
	{
		// Маршрути користувачів
		users := api.Group("/users")
		{
			users.GET("", userController.GetUsers)
			users.POST("", userController.CreateUser)
			users.GET("/:id", userController.GetUserByID)
			users.PUT("/:id", userController.UpdateUser)
			users.DELETE("/:id", userController.DeleteUser)
		}
		
	}
}

// main.go
package main

import (
	"github.com/gin-gonic/gin"
	"your-project/controller"
	"your-project/model"
	"your-project/routes"
)

func main() {
	// Ініціалізація бази даних
	model.InitDB("database.db")
	defer model.CloseDB()
	
	// Створення сервісів
	userService := model.NewUserService(model.GetDB())
	
	// Створення контролерів
	userController := controller.NewUserController(userService)
	
	// Створення Gin роутера
	r := gin.Default()
	
	// Middleware
	r.Use(gin.Logger())
	r.Use(gin.Recovery())
	
	// Налаштування маршрутів
	routes.SetupRoutes(r, userController)
	
	// Запуск сервера
	r.Run(":8080")
}